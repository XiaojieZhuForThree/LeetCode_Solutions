package com.leetcode.problems;

public class Question1007 {
	class Solution {
		public int minDominoRotations(int[] A, int[] B) {
			int val1 = A[0], val2 = B[0];
			int ans1 = getRotates(A, B, val1);
			int ans2 = getRotates(B, A, val1);
			int ans3 = getRotates(A, B, val2);
			int ans4 = getRotates(B, A, val2);
			int ans = Math.min(Math.min(ans1, ans2), Math.min(ans3, ans4));
			return ans == Integer.MAX_VALUE ? -1 : ans;
		}

		private int getRotates(int[] A, int[] B, int val) {
			int ans = 0;
			for (int i = 0; i < A.length; i++) {
				if (A[i] == val) {
					continue;
				} else if (B[i] == val) {
					ans++;
				} else {
					return Integer.MAX_VALUE;
				}
			}
			return ans;
		}
	}
}


class Solution {
public:
    int minDominoRotations(vector<int>& tops, vector<int>& bottoms) {
        int ans = INT_MAX;
        for (int i = 1; i <= 6; i++) ans = min(ans, helper(tops, bottoms, i));
        return ans == INT_MAX ? -1 : ans;
    }
private:
    int helper(vector<int>& tops, vector<int>& bottoms, int i) {
        int upper = 0, lower = 0;
        for (int j = 0; j < size(tops); j++) {
            if (tops[j] != i && bottoms[j] != i) {
                upper = INT_MAX;
                lower= INT_MAX;
                break;
            }
            if (tops[j] == i && bottoms[j] != i) lower++;
            else if (tops[j] != i && bottoms[j] == i) upper++;
        }
        return min(upper, lower);
    }
};
