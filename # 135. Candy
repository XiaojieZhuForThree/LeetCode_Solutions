package com.leetcode.problems;

import java.util.PriorityQueue;

public class Question135 {
	class Solution {
		public int candy(int[] ratings) {
			if (ratings == null || ratings.length == 0)
				return 0;
			PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> ratings[a] - ratings[b]);
			for (int i = 0; i < ratings.length; i++)
				pq.offer(i);
			int[] candies = new int[ratings.length];
			while (!pq.isEmpty()) {
				int i = pq.poll();
				int val = 1;
				if (i - 1 >= 0 && ratings[i - 1] < ratings[i])
					val = Math.max(val, candies[i - 1] + 1);
				if (i + 1 < ratings.length && ratings[i + 1] < ratings[i])
					val = Math.max(val, candies[i + 1] + 1);
				candies[i] = val;
			}
			int ans = 0;
			for (int i : candies)
				ans += i;
			return ans;
		}
	}
}


package com.leetcode.problems;

import java.util.PriorityQueue;

public class Problem135 {
	class Solution {
		public int candy(int[] ratings) {
			PriorityQueue<Integer> pq = new PriorityQueue<>(
					(a, b) -> ratings[a] != ratings[b] ? ratings[a] - ratings[b] : a - b);
			int ans = 0;
			for (int i = 0; i < ratings.length; i++)
				pq.offer(i);
			int[] records = new int[ratings.length];
			while (!pq.isEmpty()) {
				int cur = pq.poll();
				int cand = 1;
				if (cur - 1 >= 0 && ratings[cur] > ratings[cur - 1])
					cand = Math.max(cand, records[cur - 1] + 1);
				if (cur + 1 < ratings.length && ratings[cur] > ratings[cur + 1])
					cand = Math.max(cand, records[cur + 1] + 1);
				records[cur] = cand;
				ans += cand;
			}
			return ans;
		}
	}
}


from typing import List


class Solution:
    def candy(self, ratings: List[int]) -> int:
        n = len(ratings)
        record = [0 for i in range(n)]
        indexes = []
        for i in range(n):
            indexes.append((ratings[i], i))
        indexes.sort()
        for val in indexes:
            index = val[1]
            cand = 1
            if index - 1 >= 0 and ratings[index] > ratings[index - 1]:
                cand = max(cand, record[index - 1] + 1)
            if index + 1 < n and ratings[index] > ratings[index + 1]:
                cand = max(cand, record[index + 1] + 1)
            record[index] = cand
        return sum(record)



#include <vector>
using std::vector;

class Solution {
public:
	int candy(vector<int>& ratings) {
		vector<int> dp(size(ratings), 1);
		for (int i = 0; i < size(ratings) - 1; i++) {
			if (ratings[i] > ratings[i + 1] && dp[i] <= dp[i + 1]) dp[i] = dp[i + 1] + 1;
			else if (ratings[i] < ratings[i + 1] && dp[i] >= dp[i + 1]) dp[i + 1] = dp[i] + 1;
		}
		for (int i = size(ratings) - 1; i > 0; i--) {
			if (ratings[i] < ratings[i - 1] && dp[i] >= dp[i - 1]) dp[i - 1] = dp[i] + 1;
			else if (ratings[i] > ratings[i - 1] && dp[i] <= dp[i - 1]) dp[i] = dp[i - 1] + 1;
		}
		int ans = 0;
		for (int i : dp) ans += i;
		return ans;
	}
};


#include <vector>
#include <algorithm>
#include <numeric>
using std::vector;

class Solution {
public:
    int candy(vector<int>& ratings) {
        int n = size(ratings);
        vector<int> ans(n, 1);
        for (int i = 1; i < n; i++) {
            if (ratings[i] > ratings[i - 1]) ans[i] = std::max(ans[i], ans[i - 1] + 1);
        }
        for (int i = n - 2; i >= 0; i--) {
            if (ratings[i] > ratings[i + 1]) ans[i] = std::max(ans[i], ans[i + 1] + 1);
        }
        return std::accumulate(ans.begin(), ans.end(), 0);
    }
};
