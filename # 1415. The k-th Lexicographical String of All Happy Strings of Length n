package problems;

import java.util.ArrayList;
import java.util.List;

public class Question1415 {
	class Solution {
		public String getHappyString(int n, int k) {
			List<Integer> happyString = generateHappyString(n);
			if (happyString.size() < k) {
				return "";
			}
			int ans = happyString.get(k - 1);
			StringBuilder sb = new StringBuilder();
			for (; ans > 0;) {
				sb.append((char) ('a' + (ans % 10) - 1));
				ans /= 10;
			}
			return sb.reverse().toString();
		}

		private List<Integer> generateHappyString(int n) {
			if (n == 1) {
				return List.of(1, 2, 3);
			}
			List<Integer> prevHappyString = generateHappyString(n - 1);
			List<Integer> happyString = new ArrayList<>();
			for (int i : prevHappyString) {
				for (int j = 1; j < 4; j++) {
					if (i % 10 == j) {
						continue;
					}
					happyString.add(i * 10 + j);
				}
			}
			return happyString;
		}
	}
}


#include <vector>
#include <string>
#include <algorithm>
using std::string;

class Solution {
    public:
        std::vector<char> v = {'a', 'b', 'c'};
        std::vector<string> vs;
        string getHappyString(int n, int k) {
            string cur = "";
            dfs(cur, n);
            sort(vs.begin(), vs.end());
            if (size(vs) < k) return "";
            return vs[k - 1];
        }
    private:
        void dfs(string& cur, int n) {
            if (size(cur) == n) vs.push_back(cur);
            else {
                for (char c : v) {
                    if (size(cur) == 0 || cur[size(cur) - 1] != c) {
                        cur += c;
                        dfs(cur, n);
                        cur.pop_back();
                    }
                }
            }
        }
    };
