package com.leetcode.problems;

import java.util.HashSet;
import java.util.Set;

public class Question1695 {
	class Solution {
		public int maximumUniqueSubarray(int[] nums) {
			int l = 0, r = 0;
			int cur = 0, ans = 0;
			Set<Integer> set = new HashSet<>();
			for (; r < nums.length; r++) {
				if (!set.contains(nums[r])) {
					set.add(nums[r]);
					cur += nums[r];
				} else {
					ans = Math.max(ans, cur);
					while (nums[l] != nums[r]) {
						set.remove(nums[l]);
						cur -= nums[l++];
					}
					l++;
				}
			}
			ans = Math.max(ans, cur);
			return ans;
		}
	}
}


from typing import DefaultDict, List


class Solution:
    def maximumUniqueSubarray(self, nums: List[int]) -> int:
        ans = 0
        cur = 0
        rec = DefaultDict(int)
        ptr = 0
        for i in nums:
            while rec[i] == 1:
                now = nums[ptr]
                cur -= now
                rec[now] -= 1
                ptr += 1
            rec[i] = 1
            cur += i
            ans = max(ans, cur)
        return ans



class Solution {
public:
    int maximumUniqueSubarray(vector<int>& nums) {
        int ans = 0, l = 0, cur = 0;
        unordered_map<int, int> m;
        for (int r = 0; r < size(nums); r++) {
            m[nums[r]]++;
            cur += nums[r];
            while (m[nums[r]] > 1 && l < r) {
                m[nums[l]]--;
                cur -= nums[l++];
            }
            ans = max(ans, cur);
        }
        return ans;
    }
};
