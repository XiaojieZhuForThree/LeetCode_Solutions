#include <vector>
#include <algorithm>
using std::vector;

class Solution {
public:
	int minimizeMax(vector<int>& nums, int p) {
		sort(nums.begin(), nums.end());
		int n = nums.size();
		int l = 0, r = nums[n - 1];
		while (l <= r) {
			int m = l + (r - l) / 2;
			if (helper(m, nums, p)) r = m - 1;
			else l = m + 1;
		}
		return l;
	}
private:
	bool helper(int m, vector<int>& nums, int p) {
		for (int i = 1; i < nums.size(); i++) {
			if (nums[i] - nums[i - 1] <= m) {
				i++;
				p--;
			}
		}
		return p <= 0;
	}

};


#include <vector>
#include <algorithm>
using std::vector;

class Solution {
public:
    int minimizeMax(vector<int>& nums, int p) {
        sort(nums.begin(), nums.end());
        int n = nums.size();
        int l = 0, r = nums[n - 1];
        while (l <= r) {
            int m = l + (r - l) / 2;
            if(helper(m, nums, p)) r = m - 1;
            else l = m + 1;
        }
        return l;
    }
private:
    bool helper(int m, vector<int>&nums, int p){
        for (int i=1; i<nums.size(); i++) {
            if(nums[i] - nums[i - 1] <= m){
                i++;
                p--;
            }
        }
        return p <= 0;
    }

};
