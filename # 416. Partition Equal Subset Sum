package com.leetcode.problems;

import java.util.HashSet;
import java.util.Set;

public class Question416 {
	class Solution1 {
		public boolean canPartition(int[] nums) {
			if (nums == null || nums.length == 0) {
				return false;
			}
			int sum = 0;
			for (int i : nums) {
				sum += i;
			}
			if (sum % 2 == 1) {
				return false;
			}
			Set<Integer> set = new HashSet<>();
			set.add(nums[0]);
			set.add(-nums[0]);
			for (int i = 1; i < nums.length; i++) {
				Set<Integer> next = new HashSet<>();
				for (int j : set) {
					next.add(j + nums[i]);
					next.add(j - nums[i]);
				}
				set = next;
			}
			return set.contains(0);
		}
	}

	class Solution2 {
		public boolean canPartition(int[] nums) {
			int sum = 0;
			for (int i : nums) {
				sum += i;
			}
			if (sum % 2 != 0) {
				return false;
			}
			boolean[] dp = new boolean[sum / 2 + 1];
			dp[0] = true;
			for (int i = 0; i < nums.length; i++) {
				for (int j = sum / 2; j >= nums[i]; j--) {
					dp[j] = dp[j] || dp[j - nums[i]];
				}
			}
			return dp[sum / 2];
		}
	}
}


#include <vector>
#include <numeric>
using std::vector;

class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int s = std::accumulate(begin(nums), end(nums), 0);
        if (s % 2) return false;
        int t = s / 2;
        vector<vector<int>> dp(size(nums), vector<int>(t + 1, -1));
        return dfs(nums, 0, 0, t, dp);
    }
private:
    bool dfs(vector<int>& nums, int i, int c, int t, vector<vector<int>>& dp) {
        if (i >= size(nums)) return false;
        if (c > t) return false;
        if (c == t) return true;
        if (dp[i][c] != -1) return dp[i][c];
        bool inc = dfs(nums, i + 1, c + nums[i], t, dp), exc = dfs(nums, i + 1, c, t, dp);
        return dp[i][c] = inc || exc;
    }
};
