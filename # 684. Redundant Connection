package com.leetcode.problems;

public class Question684 {
	class Solution {
		public int[] findRedundantConnection(int[][] edges) {
			int[] parent = new int[2001];
			for (int i = 0; i < parent.length; i++)
				parent[i] = i;

			for (int[] edge : edges) {
				int f = edge[0], t = edge[1];
				if (find(parent, f) == find(parent, t))
					return edge;
				else
					parent[find(parent, f)] = find(parent, t);
			}

			return new int[2];
		}

		private int find(int[] parent, int f) {
			if (f != parent[f]) {
				parent[f] = find(parent, parent[f]);
			}
			return parent[f];
		}
	}
}


#include <vector>
using std::vector;

struct UF {
    vector<int> par;
    UF(int n) {
        for (int i = 0; i < n; i++) {
            par.push_back(i);
        }
    }
    void merge(int i, int j) {
        int pi = find(i), pj = find(j);
        par[pj] = pi;
    }
    int find(int i) {
        if (par[i] == i) return i;
        par[i] = find(par[i]);
        return par[i];
    }
};
class Solution {
public:
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        int p = -1, n = size(edges);
        UF uf(n);
        for (int i = 0; i < n; i++) {
            auto& e = edges[i];
            if (uf.find(e[0] - 1) == uf.find(e[1] - 1)) p = i;
            else uf.merge(e[0] - 1, e[1] - 1);
        }
        return edges[p];
    }
};
