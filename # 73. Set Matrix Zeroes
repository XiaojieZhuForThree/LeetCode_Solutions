package com.leetcode.problems;

import java.util.HashSet;
import java.util.Set;

public class Question73 {
	class Solution {
		public void setZeroes(int[][] matrix) {
			if (matrix == null || matrix.length == 0 || matrix[0].length == 0)
				return;
			Set<Integer> rows = new HashSet<>(), cols = new HashSet<>();
			int m = matrix.length, n = matrix[0].length;
			for (int i = 0; i < m; i++) {
				for (int j = 0; j < n; j++) {
					if (matrix[i][j] == 0) {
						rows.add(i);
						cols.add(j);
					}
				}
			}
			for (int i = 0; i < m; i++) {
				for (int j = 0; j < n; j++) {
					if (rows.contains(i) || cols.contains(j))
						matrix[i][j] = 0;
				}
			}
			return;
		}
	}
}


#include <vector>
#include <unordered_set>
using std::vector;

class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        int m = size(matrix), n = size(matrix[0]);
        std::unordered_set<int> r, c;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (matrix[i][j] == 0) {
                    r.insert(i);
                    c.insert(j);
                }
            }
        }
        for (int i : r) {
            for (int j = 0; j < n; j++) matrix[i][j] = 0;
        }
        for (int j : c) {
            for (int i = 0; i < m; i++) matrix[i][j] = 0;
        }
    }
};
