class Solution {
	public void sortColors(int[] nums) {
		int left = 0, right = nums.length - 1, count = 0;
		while (count < nums.length) {
			if (nums[count] == 0 && count > left) {
				nums[count] = nums[left];
				nums[left] = 0;
				left++;
			} else if (nums[count] == 2 && count < right) {
				nums[count] = nums[right];
				nums[right] = 2;
				right--;
			} else {
				count++;
			}
		}
	}
}


#include <vector>
using std::vector;

class Solution {
public:
	void sortColors(vector<int>& nums) {
		int l = 0, r = size(nums) - 1;
		for (int i = 0; i < size(nums); ) {
			if (nums[i] == 0 && i > l) {
				swap(nums, l, i);
				l++;
			}
			else if (nums[i] == 2 && i < r) {
				swap(nums, i, r);
				r--;
			}
			else i++;
		}
	}
private:
	void swap(vector<int>& nums, int i, int j) {
		int t = nums[i];
		nums[i] = nums[j];
		nums[j] = t;
	}
};


class Solution {
public:
    void sortColors(vector<int>& nums) {
        int l = 0, r = size(nums) - 1;
        for (int i = 0; i < size(nums);) {
            if (nums[i] == 0 && l < i) {
                nums[i] = nums[l];
                nums[l++] = 0;
            } else if (nums[i] == 2 && i < r) {
                nums[i] = nums[r];
                nums[r--] = 2;
            } else i++;
        }
    }
};
