package com.leetcode.problems;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class Question763 {
	class Solution {
		public List<Integer> partitionLabels(String S) {
			Map<Character, Integer> parts = new HashMap<>();
			int[] pos = new int[26];
			Arrays.fill(pos, -1);
			for (int i = 0; i < S.length(); i++) {
				char c = S.charAt(i);
				if (!parts.containsKey(c)) {
					parts.put(c, i);
					pos[c - 'a'] = i;
				} else {
					int part = parts.get(c);
					for (int j = 0; j < 26; j++) {
						if (pos[j] > part) {
							pos[j] = part;
							parts.put((char) (j + 'a'), part);
						}
					}
				}
			}
			return getPartLengths(pos, S);
		}

		private final List<Integer> getPartLengths(int[] pos, String S) {
			List<Integer> list = getSegments(pos);
			return getParts(list, S);
		}

		private final List<Integer> getSegments(int[] pos) {
			Set<Integer> set = new HashSet<>();
			for (int i : pos) {
				if (i == -1) {
					continue;
				}
				set.add(i);
			}
			List<Integer> list = new ArrayList<>(set);
			Collections.sort(list);
			return list;
		}

		private final List<Integer> getParts(List<Integer> list, String S) {
			List<Integer> ans = new ArrayList<>();
			for (int i = 0; i < list.size() - 1; i++) {
				ans.add(list.get(i + 1) - list.get(i));
			}
			ans.add(S.length() - list.get(list.size() - 1));
			return ans;
		}
	}
}


class Solution:
    def partitionLabels(self, s: str) -> List[int]:
        _map = {}
        
        for c in s:
            if c not in _map:
                _map[c] = 0
            _map[c] += 1
        
        ans = []
        cur = 0
        queued = set()
        
        for c in s:
            cur += 1
            _map[c] -= 1
            if _map[c] == 0:
                if c in queued:
                    queued.remove(c)
                if not queued:
                    ans.append(cur)
                    cur = 0
            else:
                queued.add(c)
                    
        return ans
                


#include <vector>
#include <string>
#include <algorithm>
using std::vector;
using std::string;

class Solution {
public:
    vector<int> partitionLabels(string s) {
        vector<int> l(26, -1), r(26, -1);
        for (int i = 0; i < size(s); i++) {
            if (l[s[i] - 'a'] == -1) l[s[i] - 'a'] = i;
            r[s[i] - 'a'] = i;
        }
        vector<int> v;
        for (int i = 0; i < 26; i++) {
            if (l[i] == -1) continue;
            v.push_back(i);
        }
        sort(v.begin(), v.end(), [&l, &r](int i, int j) {
            return l[i] < l[j];
            });
        vector<int> ans;
        int cl = l[v[0]], cr = r[v[0]];
        for (int i : v) {
            if (l[i] > cr) {
                ans.push_back(cr - cl + 1);
                cl = l[i];
                cr = r[i];
            }
            else cr = std::max(cr, r[i]);
        }
        ans.push_back(cr - cl + 1);
        return ans;
    }
};
