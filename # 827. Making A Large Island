package com.leetcode.problems;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class Question827 {
	class Solution {
		int[][] dirs = new int[][] { { 1, 0 }, { -1, 0 }, { 0, 1 }, { 0, -1 } };

		public int largestIsland(int[][] grid) {
			if (grid == null || grid.length == 0 || grid[0].length == 0)
				return 0;
			int m = grid.length, n = grid[0].length;
			int num = 2, ans = 0;
			Map<Integer, Integer> map = new HashMap<>();
			for (int i = 0; i < m; i++) {
				for (int j = 0; j < n; j++) {
					if (grid[i][j] == 1) {
						int area = dfs(grid, i, j, num);
						ans = Math.max(ans, area);
						map.put(num, area);
						num++;
					}
				}
			}
			for (int i = 0; i < m; i++) {
				for (int j = 0; j < n; j++) {
					if (grid[i][j] == 0) {
						int sum = 1;
						Set<Integer> set = new HashSet<>();
						for (int[] dir : dirs) {
							int ni = i + dir[0], nj = j + dir[1];
							if (ni < 0 || ni >= m || nj < 0 || nj >= n)
								continue;
							if (grid[ni][nj] == 0 || set.contains(grid[ni][nj]))
								continue;
							set.add(grid[ni][nj]);
							sum += map.get(grid[ni][nj]);
						}
						ans = Math.max(ans, sum);
					}
				}
			}
			return ans;
		}

		private int dfs(int[][] grid, int i, int j, int num) {
			int ans = 1;
			grid[i][j] = num;
			for (int[] dir : dirs) {
				int ni = i + dir[0], nj = j + dir[1];
				if (ni < 0 || ni >= grid.length || nj < 0 || nj >= grid[0].length)
					continue;
				if (grid[ni][nj] != 1)
					continue;
				ans += dfs(grid, ni, nj, num);
			}
			return ans;
		}
	}
}


#include <vector>
#include <map>
#include <set>
using std::vector;

class Solution {
public:
int dx[4]={0,1,0,-1};
int dy[4]={1,0,-1,0};
    int dfs(int i,int j,int pi,int pj,vector<vector<int>>& grid,vector<vector<std::pair<int,int>>>& parent){
        if(i<0 or j<0 or i>=grid.size() or j>=grid[0].size() or !grid[i][j] or (parent[i][j].first!=-1 and parent[i][j].second!=-1)){
            return 0;
        }
        int sum=1;
        parent[i][j]={pi,pj};
        for(int k=0;k<4;k++){
            int ni = i+dx[k];
            int nj = j+dy[k];
            sum+=dfs(ni,nj,pi,pj,grid,parent);
            
        }
        return sum;
    }
    int largestIsland(vector<vector<int>>& grid) {
        int r=grid.size();
        int c=grid[0].size();
        int maxi=0;
        std::map<std::pair<int,int>,int>m;
        vector<vector<std::pair<int,int>>>parent(r,vector<std::pair<int,int>>(c,{-1,-1}));
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                if(grid[i][j] and parent[i][j].first==-1 and parent[i][j].second==-1){
                    int sz=dfs(i,j,i,j,grid,parent);
                    m[{i,j}]=sz;
                    maxi=std::max(maxi,sz);
                }
            }
        }

        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                if(!grid[i][j]){
                    int har=0;
                    std::set<std::pair<int,int>>st;
                    for(int k=0;k<4;k++){
                        int ni = i+dx[k];
                        int nj = j+dy[k];
                        if(ni>=0 and nj>=0 and ni<r and nj<c){
                            if(!st.count({parent[ni][nj].first,parent[ni][nj].second})){
                                st.insert({parent[ni][nj].first,parent[ni][nj].second});
                                har+=m[{parent[ni][nj].first,parent[ni][nj].second}];
                            }
                        }
                    }
                    maxi=std::max(maxi,1+har);
                }
            }
        }
        return maxi;
    }
};
