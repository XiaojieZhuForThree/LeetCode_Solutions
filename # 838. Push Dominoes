package com.leetcode.problems;

public class Question838 {
	class Solution {
		public String pushDominoes(String d) {
			d = 'L' + d + 'R';
			StringBuilder res = new StringBuilder();
			for (int i = 0, j = 1; j < d.length(); ++j) {
				if (d.charAt(j) == '.')
					continue;
				int middle = j - i - 1;
				if (i > 0)
					res.append(d.charAt(i));
				if (d.charAt(i) == d.charAt(j))
					for (int k = 0; k < middle; k++)
						res.append(d.charAt(i));
				else if (d.charAt(i) == 'L' && d.charAt(j) == 'R')
					for (int k = 0; k < middle; k++)
						res.append('.');
				else {
					for (int k = 0; k < middle / 2; k++)
						res.append('R');
					if (middle % 2 == 1)
						res.append('.');
					for (int k = 0; k < middle / 2; k++)
						res.append('L');
				}
				i = j;
			}
			return res.toString();
		}
	}
}



#include <string>
using namespace std;

class Solution {
public:
	string pushDominoes(string dominoes) {
		string ans = "";
		int prev = 0;
		for (int i = 0; i < dominoes.size(); i++) ans += '.';
		for (int i = 0; i < dominoes.size(); i++) {
			char d = dominoes[i];
			if (d == '.');
			else if (d == 'R') {
				if (dominoes[prev] != 'R') {
					prev = i;
				}
				else {
					for (; prev <= i; prev++) {
						ans[prev] = 'R';
					}
					prev--;
				}
			}
			else {
				if (dominoes[prev] != 'R') {
					for (; prev <= i; prev++) {
						ans[prev] = 'L';
					}
				}
				else {
					int l = prev, r = i;
					while (l < r) {
						ans[l++] = 'R';
						ans[r--] = 'L';
					}
					prev = i + 1;
				}
			}
		}
		if (prev < dominoes.size() && dominoes[prev] == 'R') {
			for (; prev < dominoes.size(); prev++) ans[prev] = 'R';
		}
		return ans;
	}
};


#include <string>
#include <vector>
using std::string;

class Solution {
public:
    string pushDominoes(string dominoes) {
        int n = size(dominoes);
        std::vector<int> rs(n, 0), ls(n, 0);
        int cur = 0;
        for (int i = 0; i < n; i++) {
            if (dominoes[i] == '.') {
                if (cur == 0) continue;
                else cur--;
            }
            else if (dominoes[i] == 'L') cur = 0;
            else cur = -1;
            rs[i] = cur;
        }
        cur = 0;
        for (int i = n - 1; i >= 0; i--) {
            if (dominoes[i] == '.') {
                if (cur == 0) continue;
                else cur--;
            }
            else if (dominoes[i] == 'R') cur = 0;
            else cur = -1;
            ls[i] = cur;
        }
        string ans;
        for (int i = 0; i < n; i++) {
            if (ls[i] == rs[i]) ans.push_back('.');
            else if (ls[i] == 0 && rs[i] < 0) ans.push_back('R');
            else if (ls[i] < 0 && rs[i] == 0) ans.push_back('L');
            else if (ls[i] < rs[i]) ans.push_back('R');
            else ans.push_back('L');
        }
        return ans;
    }
};
